{"ast":null,"code":"import{useState,useEffect}from'react';import{searchJobs}from'./services/api';import Filters from'./components/Filters';import JobList from'./components/JobList';import LoadingSpinner from'./components/LoadingSpinner';import DisplaySettings from'./components/DisplaySettings';import Sidebar from'./components/Sidebar';import SortingSidebar from'./components/SortingSidebar';import'./styles/responsive.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[jobs,setJobs]=useState([]);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[displaySettings,setDisplaySettings]=useState({showSalary:true,showLocation:true,showType:true,showTechnologies:true,showExperienceLevel:true,showSource:true});const[preferredCompanies,setPreferredCompanies]=useState(()=>{const saved=localStorage.getItem('preferredCompanies');return saved?JSON.parse(saved):[];});const[sortBy,setSortBy]=useState(null);const[sortOrder,setSortOrder]=useState('desc');const[selectedSource,setSelectedSource]=useState('All Sources');const[activeFilters,setActiveFilters]=useState({});useEffect(()=>{localStorage.setItem('preferredCompanies',JSON.stringify(preferredCompanies));},[preferredCompanies]);// Remove this useEffect as it's causing the infinite loop\n// useEffect(() => {\n//   if (jobs.length > 0) {\n//     const sortedJobs = [...jobs];\n//     setJobs(sortedJobs);\n//   }\n// }, [preferredCompanies, sortBy, sortOrder]);\n// Update logging useEffect to avoid dependency on jobs array\nuseEffect(()=>{const getSortedJobs=()=>{let sortedJobs=[...jobs];if(preferredCompanies.length>0){sortedJobs.sort((a,b)=>{const aIsPreferred=preferredCompanies.some(company=>a.company.toLowerCase().includes(company.toLowerCase()));const bIsPreferred=preferredCompanies.some(company=>b.company.toLowerCase().includes(company.toLowerCase()));return bIsPreferred-aIsPreferred;});}return sortedJobs;};if(jobs.length>0){const currentJobs=getSortedJobs();// Remove console logging\n}},[jobs,preferredCompanies]);// Add jobs to dependency array\nconst handleSearch=async filters=>{setIsLoading(true);setError(null);try{const results=await searchJobs();setJobs(results);setActiveFilters(filters);// Store the filters\n}catch(err){setError('Failed to fetch jobs. Please try again.');}finally{setIsLoading(false);}};const handleSort=(sortType,sourceFilter)=>{if(sortType==='source'){setSelectedSource(sourceFilter);}else if(sortType===sortBy){setSortOrder(current=>current==='desc'?'asc':'desc');}else{setSortBy(sortType);setSortOrder('desc');}};const handlePreferredCompaniesChange=companies=>{setPreferredCompanies(companies);};return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gray-100 dark:bg-dark-primary transition-colors duration-300\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"bg-white dark:bg-dark-secondary shadow-lg fixed w-full z-10\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-7xl mx-auto py-6 px-4 flex justify-between items-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-gray-900 dark:text-white\",children:\"StackHunt\"}),/*#__PURE__*/_jsx(DisplaySettings,{settings:displaySettings,onSettingsChange:setDisplaySettings})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"pt-20 pl-48 pr-64\",children:[\" \",/*#__PURE__*/_jsx(SortingSidebar,{onSortChange:handleSort}),/*#__PURE__*/_jsxs(\"main\",{className:\"flex-1 p-6\",children:[/*#__PURE__*/_jsx(Filters,{onSearch:handleSearch,isLoading:isLoading}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-4 bg-red-50 text-red-700 rounded-md\",children:error}),isLoading?/*#__PURE__*/_jsx(LoadingSpinner,{}):/*#__PURE__*/_jsx(JobList,{jobs:jobs,displaySettings:displaySettings,preferredCompanies:preferredCompanies,sortBy:sortBy,sortOrder:sortOrder,filters:activeFilters// Pass filters to JobList\n,selectedSource:selectedSource})]}),/*#__PURE__*/_jsx(Sidebar,{onPreferredCompaniesChange:handlePreferredCompaniesChange})]})]});}export default App;","map":{"version":3,"names":["useState","useEffect","searchJobs","Filters","JobList","LoadingSpinner","DisplaySettings","Sidebar","SortingSidebar","jsx","_jsx","jsxs","_jsxs","App","jobs","setJobs","isLoading","setIsLoading","error","setError","displaySettings","setDisplaySettings","showSalary","showLocation","showType","showTechnologies","showExperienceLevel","showSource","preferredCompanies","setPreferredCompanies","saved","localStorage","getItem","JSON","parse","sortBy","setSortBy","sortOrder","setSortOrder","selectedSource","setSelectedSource","activeFilters","setActiveFilters","setItem","stringify","getSortedJobs","sortedJobs","length","sort","a","b","aIsPreferred","some","company","toLowerCase","includes","bIsPreferred","currentJobs","handleSearch","filters","results","err","handleSort","sortType","sourceFilter","current","handlePreferredCompaniesChange","companies","className","children","settings","onSettingsChange","onSortChange","onSearch","onPreferredCompaniesChange"],"sources":["C:/Users/vitor/cloneGit/Bonviniv.github.io/stackhunt/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { searchJobs } from './services/api';\r\nimport Filters from './components/Filters';\r\nimport JobList from './components/JobList';\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport DisplaySettings from './components/DisplaySettings';\r\nimport Sidebar from './components/Sidebar';\r\nimport SortingSidebar from './components/SortingSidebar';\r\nimport './styles/responsive.css';\r\n\r\nfunction App() {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [displaySettings, setDisplaySettings] = useState({\r\n    showSalary: true,\r\n    showLocation: true,\r\n    showType: true,\r\n    showTechnologies: true,\r\n    showExperienceLevel: true,\r\n    showSource: true\r\n  });\r\n  const [preferredCompanies, setPreferredCompanies] = useState(() => {\r\n    const saved = localStorage.getItem('preferredCompanies');\r\n    return saved ? JSON.parse(saved) : [];\r\n  });\r\n  const [sortBy, setSortBy] = useState(null);\r\n  const [sortOrder, setSortOrder] = useState('desc');\r\n  const [selectedSource, setSelectedSource] = useState('All Sources');\r\n  const [activeFilters, setActiveFilters] = useState({});\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('preferredCompanies', JSON.stringify(preferredCompanies));\r\n  }, [preferredCompanies]);\r\n\r\n  // Remove this useEffect as it's causing the infinite loop\r\n  // useEffect(() => {\r\n  //   if (jobs.length > 0) {\r\n  //     const sortedJobs = [...jobs];\r\n  //     setJobs(sortedJobs);\r\n  //   }\r\n  // }, [preferredCompanies, sortBy, sortOrder]);\r\n\r\n  // Update logging useEffect to avoid dependency on jobs array\r\n  useEffect(() => {\r\n    const getSortedJobs = () => {\r\n      let sortedJobs = [...jobs];\r\n      \r\n      if (preferredCompanies.length > 0) {\r\n        sortedJobs.sort((a, b) => {\r\n          const aIsPreferred = preferredCompanies.some(company => \r\n            a.company.toLowerCase().includes(company.toLowerCase())\r\n          );\r\n          const bIsPreferred = preferredCompanies.some(company => \r\n            b.company.toLowerCase().includes(company.toLowerCase())\r\n          );\r\n          return bIsPreferred - aIsPreferred;\r\n        });\r\n      }\r\n      return sortedJobs;\r\n    };\r\n\r\n    if (jobs.length > 0) {\r\n      const currentJobs = getSortedJobs();\r\n      // Remove console logging\r\n    }\r\n  }, [jobs, preferredCompanies]); // Add jobs to dependency array\r\n\r\n  const handleSearch = async (filters) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const results = await searchJobs();\r\n      setJobs(results);\r\n      setActiveFilters(filters); // Store the filters\r\n    } catch (err) {\r\n      setError('Failed to fetch jobs. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSort = (sortType, sourceFilter) => {\r\n    if (sortType === 'source') {\r\n      setSelectedSource(sourceFilter);\r\n    } else if (sortType === sortBy) {\r\n      setSortOrder(current => current === 'desc' ? 'asc' : 'desc');\r\n    } else {\r\n      setSortBy(sortType);\r\n      setSortOrder('desc');\r\n    }\r\n  };\r\n\r\n  const handlePreferredCompaniesChange = (companies) => {\r\n    setPreferredCompanies(companies);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 dark:bg-dark-primary transition-colors duration-300\">\r\n      <header className=\"bg-white dark:bg-dark-secondary shadow-lg fixed w-full z-10\">\r\n        <div className=\"max-w-7xl mx-auto py-6 px-4 flex justify-between items-center\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">StackHunt</h1>\r\n          <DisplaySettings settings={displaySettings} onSettingsChange={setDisplaySettings} />\r\n        </div>\r\n      </header>\r\n      <div className=\"pt-20 pl-48 pr-64\"> {/* Updated padding-top from pt-16 to pt-32 */}\r\n        <SortingSidebar onSortChange={handleSort} />\r\n        <main className=\"flex-1 p-6\">\r\n          <Filters onSearch={handleSearch} isLoading={isLoading} />\r\n          {error && (\r\n            <div className=\"mt-4 p-4 bg-red-50 text-red-700 rounded-md\">{error}</div>\r\n          )}\r\n          {isLoading ? (\r\n            <LoadingSpinner />\r\n          ) : (\r\n            <JobList \r\n              jobs={jobs} \r\n              displaySettings={displaySettings}\r\n              preferredCompanies={preferredCompanies}\r\n              sortBy={sortBy}\r\n              sortOrder={sortOrder}\r\n              filters={activeFilters}  // Pass filters to JobList\r\n              selectedSource={selectedSource}\r\n            />\r\n          )}\r\n        </main>\r\n        <Sidebar \r\n          onPreferredCompaniesChange={handlePreferredCompaniesChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}